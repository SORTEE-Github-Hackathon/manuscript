{"headings":["sec-E1","as-a-long-term-but-sporadic-github-user-myself-i-agree-with-most-of-the-points-and-cases-presented-in-the-paper.","sec-E1.1","sec-E1.2","sec-E1.3","sec-E1.4","sec-E1.5","sec-R1","this-paper-clearly-communicates-the-enthusiasm-of-the-authors-for-integrating-github-in-the-eeb-research-process.-advantages-in-areas-of-collaboration-transparent-and-reproducible-science-are-clear-and-nicely-discussed.-this-is-a-well-written-paper.","sec-R1.1","sec-R1.2","sec-R1.3","sec-R1.4","r1.5.-line-346-delete-second-can-who-can-also-can-change-through-time","r1.6.-line-389-it-should-be-each-others-work-contribute-to-each-other-work-without-necessarily","r1.7.-line-457-missing-collaborator-especially-when-many-may-be","r1.8.-line-477-not-sure-what-this-sentence-is-saying-requiring-the-complementation-of-other-tools-to-fully-integration-project-files-and-github-repositories","sec-R2","the-manuscript-presents-how-ecologists-and-evolutionary-biologists-eeb-can-use-collaborative-software-development-project-management-tools.-the-authors-present-a-high-level-view-of-github-and-the-git-version-control-system-that-is-at-its-core.-as-the-authors-detail-the-tools-that-github-provides-has-broad-potential-to-be-leveraged-within-the-eeb-community.-the-paper-is-well-written-and-helps-to-make-github-tools-and-related-concepts-legible-to-eeb-audiences.-on-the-whole-i-see-this-as-potentially-being-an-impactful-paper-for-improving-eeb-research.-i-have-the-following-major-and-minor-comments-for-the-authors","sec-R2.1","sec-R2.2","sec-R2.3","sec-R2.4","sec-R2.5","r2.6.-the-sentence-from-line-66-67-is-missing-a-close-parenthesis.","r2.7.-there-appears-to-be-a-fourth-barrier-at-line-478.-i-suggest-splitting-the-paragraph-from-line-472-to-483-into-two-paragraphs-and-expanding-on-both-reluctance-to-share-data-and-language-specific-resources-as-barriers-to-adoption.","r2.8.-line-570-could-also-be-e-should-be-could-also-be-a."],"entries":[{"order":{"section":[0,0,1,1,0,0,0],"number":5},"key":"sec-E1.4","caption":"E1.4. I am surprised you didn’t include integration between GitHub and Overleaf. Overleaf is also a good collaborative latex-based text processor, and provides syncing with GitHub (and Dropbox) in a way that will be more familiar to beginning users. (Actually, I eventually found it buried in Table 1)"},{"order":{"section":[0,1,0,0,6,0,0],"number":17},"key":"sec-R2.5","caption":"R2.5. Related to Major Comments 1 and 4, given that the focus of the paper is toward integration into EEB scientific research workflows, I suggest adding another figure (or replacing Figure 1) that details a generalized scientific research workflow (e.g., Munafò et al. 2017 https://www.nature.com/articles/s41562-016-0021) and how Github supports/augments that workflow. This could relate to or build on Table 2, which a useful summarization of important features as they relate to different research participants."},{"order":{"section":[0,1,0,0,4,0,0],"number":15},"key":"sec-R2.3","caption":"R2.3. I would find it helpful to give a brief (1-2 sentence) history of Git (L85-89). Namely, that it was developed as an aid for software development within distributed groups of software engineers and was developed within an open-source framework so that it could be improved by the community. This provides more context as to why Github (as it extends Git) is a useful tool for collaboration “by design”."},{"order":{"section":[0,0,1,1,1,0,0],"number":6},"key":"sec-E1.5","caption":"E1.5. Finally, DropBox, SharePoint, and OneDrive are file-sharing systems that include version control, are widely supported, especially in colleges and universities, and are much easier to use for those who might be uncomfortable learning a system such as GitHub. Other than the ability to clone and fork, why should one choose GitHub over, for example, DropBox or SharePoint? More should be made of this in text, as opposed to burying it in Table 1, which is referenced only once in text (line 232) and only in the context of other longterm archives (line 231). Indeed, I suggest a somewhat expanded section of the ms. dedicated to a detailed exploration of the comparisons made in this Table. Otherwise, the ms. comes across as more proselytizing and less analytical/convincing."},{"order":{"section":[0,1,0,0,5,0,0],"number":16},"key":"sec-R2.4","caption":"R2.4. I suggest adding a discussion on dependency testing within or following the paragraph on Automation (Lines 373-382). This is a project “ecosystem” phenomenon that comes from collaboration, where you build your project on the work of someone else. As projects change over time, they can alter other projects. Software engineers have been working on this challenge for a long time in distributed teams where different parts of software are being built by different programmers. Checks can be done automatically within the software engineering framework (see Pasquier et al. 2017 https://www.nature.com/articles/sdata2017114). Beyond detection, any major changes can be detected and presented without additional work from the user via features like badges (https://shields.io/) within the project page (e.g., README)."},{"order":{"section":[0,1,0,0,3,0,0],"number":14},"key":"sec-R2.2","caption":"R2.2. Figure 2 was useful, especially as it summarized across multiple areas that a reader make in-roads into using Github. Please clarify how the “Technical Difficulty” was assessed. Was this based on the impression of the working group? Was it quantified using different types of required knowledge (e.g., programming, software design, working in the Terminal, etc.)?"},{"order":{"section":[0,1,0,0,2,0,0],"number":13},"key":"sec-R2.1","caption":"R2.1. Figure 1 was more confusing to me than helpful. It presents a view of a Github interface in order to detail generalized features; however, it is edited/abstracted so much that it doesn’t map easily to the interface as it would be viewed by a reader of the paper. To improve this I would reduce the level of abstraction of the web interface."},{"order":{"section":[0,0,1,0,2,0,0],"number":2},"key":"sec-E1.1","caption":"E1.1. I agree with Reviewer 1 that these could be streamlined somewhat into a smaller number of more generalizable cases. They also are a bit heavily weighted towards more experienced users. “Simple” operations like push, pull, and commit are rarely understandable to new users, who routinely forget to commit their actions. The GitHub Desktop app makes many of the operations and use of GitHub somewhat easier, and is a good entree into GitHub and Git for novices. More could be made of the desktop app."},{"order":{"section":[0,0,2,0,3,0,0],"number":9},"key":"sec-R1.2","caption":"R1.2. The title and abstract gave me the impression that the goal is to convince EEB researcher to start using GitHub. If that’s the case, it might be better to tailor the use cases to that entry level and use less GitHub specific lingo. Advanced usage may be mentioned but not detailed as much as it is currently done. E.g. collaboratively writing a paper in GitHub is probably out of the question for most. Most GitHub options for communication, discussion, issue tracking are still somewhat esoteric for most non-programmers."},{"order":{"section":[0,0,2,0,5,0,0],"number":11},"key":"sec-R1.4","caption":"R1.4. In my experience, the project continuity is actually very high on the importance list for researchers, i.e., knowing that the code and data will be findable by the next student. This includes the discussion of organizing and managing teams, keeping lab information in one place etc. Followed by code versioning and the ability to go back to older versions. Interest in website development is picking up because it really is simple to do in GitHub, and the information can be maintained by several people (i.e., a lab group)."},{"order":{"section":[0,0,1,0,4,0,0],"number":4},"key":"sec-E1.3","caption":"E1.3. Another reason that many EEBers don’t use GitHub appears to be related to how we develop code for projects. Unless we are developing packages that others are likely to use, we tend to develop one-off scripts or functions that, once they work and are run, are never returned to. Version control is not used widely, or even needed in these cases (and my own work in software engineering provenance software has similarly had little uptake for the same reasons). I recognize that this makes it difficult to document the processes involved, but if the goal is simply to analyze the data at hand and push out another paper, why deal with the overhead of version control? At root, this is a sociological phenomenon, not a scientific one. Within your ms., consider saying something about how even one-off scripts may need to be documented, archived, and assigned a DOI to conform to evolving archiving requirements of journals."},{"order":{"section":[0,0,2,0,4,0,0],"number":10},"key":"sec-R1.3","caption":"R1.3. Although the abstract states ‘We outline features ranging from low to high technical difficulty’ the paper reads a bit like a laundry list of what GitHub can do (in fact, the word ‘can’ is used about 140 times, which makes for tedious read). Figure 2 helps sort through this laundry list and defines the technical difficulty. It might be better to clearly lay out where anybody can start using GitHub effectively in the text. And the emphasis is on ‘effectively’. Most people are not likely to learn a new piece of software if it does not promise to reduce effort and time. So, defining tasks where GitHub shines in terms of return on investment maybe the better approach to convincing new users and then only mention the advance use cases with some pointers to further reading, but not going into too much detail."},{"order":{"section":[0,0,1,0,0,0,0],"number":1},"key":"sec-E1","caption":"Comments from the Editor (E1)"},{"order":{"section":[0,0,2,0,0,0,0],"number":7},"key":"sec-R1","caption":"Recommendations from Reviewer 1 (R1)"},{"order":{"section":[0,0,1,0,3,0,0],"number":3},"key":"sec-E1.2","caption":"E1.2. In my own experience, the “public” nature of repos is a major barrier to the use of GitHub for exactly the reason you suggest - EEB practioners remain very uncomfortable with sharing data pre-publication (and often even post-publication). Some additional emphasis on the ability to make repos “private” should be included beyond the Boxes."},{"order":{"section":[0,0,2,0,2,0,0],"number":8},"key":"sec-R1.1","caption":"R1.1. I would, however, recommend some restructuring and shortening. As it stands, this paper is too long and some of the use cases are too nerdy to spark enthusiasm in somebody who is not already using GitHub. Breaking it into 13 use cases leads to some repetition and those use cases may be combined more effectively for convincing a new user."},{"order":{"section":[0,1,0,0,0,0,0],"number":12},"key":"sec-R2","caption":"Recommendations from Reviewer 2 (R2)"}]}